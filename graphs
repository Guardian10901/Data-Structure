#include <stdio.h>
#include <stdlib.h>

// Define maximum number of vertices in the graph
#define N 12

// Data structure to store graph
struct Graph {
	// An array of pointers to Node to represent adjacency list
	struct Node* head[N];
};
struct Graph *graph;

// A data structure to store adjacency list nodes of the graph
struct Node {
	int dest;
  bool visited;
	struct Node* next;
};

// data structure to store graph edges
struct Edge {
	int src, dest;
};

// Function to create an adjacency list from specified edges
struct Graph* createGraph(struct Edge edges[], int n)
{
	unsigned i;

	// allocate memory for graph data structure
	struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));

	// initialize head pointer for all vertices
	for (i = 0; i < N; i++)
		graph->head[i] = NULL;

	// add edges to the directed graph one by one
	for (i = 0; i < n; i++)
	{
		// get source and destination vertex
		int src = edges[i].src;
		int dest = edges[i].dest;

		// allocate new node of Adjacency List from src to dest
		struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
		newNode->dest = dest;
    newNode->visited=false;

		// point new node to current head
		newNode->next = graph->head[src];

		// point head pointer to new node
		graph->head[src] = newNode;
	}

	return graph;
}

// Function to print adjacency list representation of graph
void printGraph(struct Graph* graph)
{
	int i;
	for (i = 0; i <= N; i++)
	{
		// print current vertex and all ts neighbors
		struct Node* ptr = graph->head[i];
		while (ptr != NULL)
		{
			printf("(%d -> %d)\t", i, ptr->dest);
			ptr = ptr->next;
		}

		printf("\n");
	}
}
void dptsea(int v)
{ struct Node* ptr= graph->head[v];

  if(ptr->visited==false)
  {printf("%i   ",v);
    ptr->visited=true;
    	int i;
for (i = 0; i <=N; i++)
	{
		// print current vertex and all ts neighbors
		struct Node* pt = graph->head[i];
		while (pt != NULL)
		{ if(pt->dest==v)
			pt->visited=true;
      
			pt = pt->next;
		}

		
	}
    
    dptsea(ptr->dest);
    
  }
  else{printf("%i   ",v);
    
    while(ptr->visited==true)
    {
      ptr=ptr->next;
      if(ptr==NULL)
        return;
      
    }
    	int i;
for (i = 0; i <=N; i++)
	{
		// print current vertex and all ts neighbors
		struct Node* pt = graph->head[i];
		while (pt != NULL)
		{ if(pt->dest==v)
			pt->visited=true;
      
			pt = pt->next;
		}

		
	}
    dptsea(ptr->dest);
  }
 if(ptr==NULL)
 {
   return;
 }

}

// Directed Graph Implementation in C
int main(void)
{
	// input array containing edges of the graph (as per above diagram)
	// (x, y) pair in the array represents an edge from x to y
	struct Edge edges[] =
	{
		 {1,4 },{ 1,2 },{2,6},{2,4},{2,3},{2,1},{3,6},{3,2},{4,7},{4,5},{4,2},{4,1},{5,7},{5,4},{6,9},{6,8},{6,3},{6,2},{7,11},{7,10},{7,5},{7,4},{8,9},{8,6},{9,10},{9,12},{9,8},{9,6},{10,12},{10,7},{10,9},{10,11},{11,10},{11,7},{12,10},{12,9}
	};

	// calculate number of edges
	int n = sizeof(edges)/sizeof(edges[0]);
  	// construct graph from given edges
	graph = createGraph(edges, n);

	// print adjacency list representation of graph
	printGraph(graph);
  int ch;
  printf("Enter choice\n1.depth first search\n2.breadth first search\n");
  scanf("%i",&ch);
  if(ch==1)
  {dptsea(1);

  }
  else{
    brthsea();
  }

	return 0;
}
