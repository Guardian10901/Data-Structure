//binary tree operations
#include<stdio.h>
#include <malloc.h>

struct node{
  int info;
  struct node*left;
  struct node*right;
};
struct node* a=NULL;
struct node* parent=NULL;

//insert
void insert(struct node* c, char side)
{ struct node* ptr;
   ptr=(struct node*)malloc(sizeof(struct node));
   
   printf("enter data\n");
   scanf("%i",&ptr->info);
   
     if(a==NULL)
   { 
     a=ptr;
     
      
   } 
   else
   switch(side)
   {
     case 'l':c->left=ptr;
              break;
    case 'r':c->right=ptr;
            break;
    
   }
   int l=0,r=0;
   printf("Does %i have a left node(1/0)\n",ptr->info);
   scanf("%i",&l);
   if(l==1)
    {insert(ptr,'l');
     
     }
   else
     { 
       ptr->left=NULL;
       
       
     }
    printf("Does %i have a right node(1/0)\n",ptr->info);
    scanf("%i",&r);
     if(r==1)
     {insert(ptr,'r');
     }
     else{
       
       ptr->right=NULL;
       return;
     }
     


   
  
}
void findFullNode(struct node *root,int item,char side) 
{
    if (root != NULL) 
    { //printf("in");
    
   // if(root->right==NULL||root->left==NULL)
    if(root->info==item)
             {//printf("equal%i",parent->info);
               //free(root);
               if(side=='l')
               {parent->left=NULL;
               //printf("null%i",parent->info);
              }
              if(side=='r')
               {parent->right=NULL;
               //printf("null%i",parent->info);
               }
    free(root);} parent=root;
        findFullNode(root->left,item,'l'); 
        parent=root;
           
            

        findFullNode(root->right,item,'r');
        
       
    } 
} 
//inorder traversal
void inorder(struct node* a)
{
  if(a!=NULL)
  {
    inorder(a->left);
    printf("%i ",a->info);
    inorder(a->right);
  }else
  return;
}
//preorder
void preorder(struct node* a)
{
  if(a!=NULL)
  { printf("%i ",a->info);
    preorder(a->left);
    preorder(a->right);
  }
}

//post order
void postorder(struct node* a)
{
  if(a!=NULL)
  { 
    postorder(a->left);
    postorder(a->right);
    printf("%i ",a->info);
  }else
  return;
}
//delete
void delet(struct node* a)
{int item;
printf("Enter the node to be deleted\n");
scanf("%i",&item);
findFullNode(a,item,'o');
  
}
int main()
{ int ch;
do{
printf("Enter option \n1.insert\n2.inorder Traversal\n3.preorder Traversal\n4.postorder Traversal\n5.Delete\n6.Exit\n");
scanf("%i",&ch);
switch(ch)
{case 1:insert(a,'o');
        
        break;
  case 2:inorder(a);
          break;
  case 3:preorder(a);
        break;
  case 4:postorder(a);
        break;
  case 5:delet(a);
      break;

}}while(ch<6);

}

